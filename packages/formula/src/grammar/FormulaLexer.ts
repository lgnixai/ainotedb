// Generated from src/grammar/FormulaLexer.g4 by ANTLR 4.13.2
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class FormulaLexer extends Lexer {
	public static readonly ADD = 1;
	public static readonly SUBTRACT = 2;
	public static readonly MULTIPLY = 3;
	public static readonly DIVIDE = 4;
	public static readonly MODULO = 5;
	public static readonly POWER = 6;
	public static readonly EQUAL = 7;
	public static readonly NOT_EQUAL = 8;
	public static readonly LESS = 9;
	public static readonly LESS_EQUAL = 10;
	public static readonly GREATER = 11;
	public static readonly GREATER_EQUAL = 12;
	public static readonly AND = 13;
	public static readonly OR = 14;
	public static readonly NOT = 15;
	public static readonly LPAREN = 16;
	public static readonly RPAREN = 17;
	public static readonly LBRACE = 18;
	public static readonly RBRACE = 19;
	public static readonly LBRACKET = 20;
	public static readonly RBRACKET = 21;
	public static readonly COMMA = 22;
	public static readonly SEMICOLON = 23;
	public static readonly COLON = 24;
	public static readonly DOT = 25;
	public static readonly UNDERSCORE = 26;
	public static readonly IDENTIFIER = 27;
	public static readonly NUMBER = 28;
	public static readonly STRING = 29;
	public static readonly TRUE = 30;
	public static readonly FALSE = 31;
	public static readonly NULL = 32;
	public static readonly DATE = 33;
	public static readonly TIME = 34;
	public static readonly DATETIME = 35;
	public static readonly WS = 36;
	public static readonly COMMENT = 37;
	public static readonly MULTILINE_COMMENT = 38;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: (string | null)[] = [ null, "'+'", 
                                                            "'-'", "'*'", 
                                                            "'/'", "'%'", 
                                                            "'^'", "'='", 
                                                            "'!='", "'<'", 
                                                            "'<='", "'>'", 
                                                            "'>='", null, 
                                                            null, null, 
                                                            "'('", "')'", 
                                                            "'{'", "'}'", 
                                                            "'['", "']'", 
                                                            "','", "';'", 
                                                            "':'", "'.'", 
                                                            "'_'" ];
	public static readonly symbolicNames: (string | null)[] = [ null, "ADD", 
                                                             "SUBTRACT", 
                                                             "MULTIPLY", 
                                                             "DIVIDE", "MODULO", 
                                                             "POWER", "EQUAL", 
                                                             "NOT_EQUAL", 
                                                             "LESS", "LESS_EQUAL", 
                                                             "GREATER", 
                                                             "GREATER_EQUAL", 
                                                             "AND", "OR", 
                                                             "NOT", "LPAREN", 
                                                             "RPAREN", "LBRACE", 
                                                             "RBRACE", "LBRACKET", 
                                                             "RBRACKET", 
                                                             "COMMA", "SEMICOLON", 
                                                             "COLON", "DOT", 
                                                             "UNDERSCORE", 
                                                             "IDENTIFIER", 
                                                             "NUMBER", "STRING", 
                                                             "TRUE", "FALSE", 
                                                             "NULL", "DATE", 
                                                             "TIME", "DATETIME", 
                                                             "WS", "COMMENT", 
                                                             "MULTILINE_COMMENT" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"ADD", "SUBTRACT", "MULTIPLY", "DIVIDE", "MODULO", "POWER", "EQUAL", "NOT_EQUAL", 
		"LESS", "LESS_EQUAL", "GREATER", "GREATER_EQUAL", "AND", "OR", "NOT", 
		"LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "COMMA", 
		"SEMICOLON", "COLON", "DOT", "UNDERSCORE", "IDENTIFIER", "NUMBER", "STRING", 
		"TRUE", "FALSE", "NULL", "DATE", "TIME", "DATETIME", "WS", "COMMENT", 
		"MULTILINE_COMMENT", "DIGIT", "LETTER", "A", "B", "C", "D", "E", "F", 
		"G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", 
		"U", "V", "W", "X", "Y", "Z",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, FormulaLexer._ATN, FormulaLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "FormulaLexer.g4"; }

	public get literalNames(): (string | null)[] { return FormulaLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return FormulaLexer.symbolicNames; }
	public get ruleNames(): string[] { return FormulaLexer.ruleNames; }

	public get serializedATN(): number[] { return FormulaLexer._serializedATN; }

	public get channelNames(): string[] { return FormulaLexer.channelNames; }

	public get modeNames(): string[] { return FormulaLexer.modeNames; }

	public static readonly _serializedATN: number[] = [4,0,38,349,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
	16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,
	2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,
	31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,
	7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
	45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
	2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,
	60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,1,0,1,0,1,1,1,
	1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,
	9,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,
	1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,
	21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,26,5,26,
	198,8,26,10,26,12,26,201,9,26,1,27,4,27,204,8,27,11,27,12,27,205,1,27,1,
	27,4,27,210,8,27,11,27,12,27,211,3,27,214,8,27,1,28,1,28,1,28,1,28,5,28,
	220,8,28,10,28,12,28,223,9,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,
	30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,
	1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
	35,4,35,263,8,35,11,35,12,35,264,1,35,1,35,1,36,1,36,1,36,1,36,5,36,273,
	8,36,10,36,12,36,276,9,36,1,36,1,36,1,37,1,37,1,37,1,37,5,37,284,8,37,10,
	37,12,37,287,9,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,
	1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,
	48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,
	1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,
	62,1,63,1,63,1,64,1,64,1,65,1,65,1,285,0,66,1,1,3,2,5,3,7,4,9,5,11,6,13,
	7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
	39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
	63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,0,79,0,81,0,83,0,85,0,87,0,
	89,0,91,0,93,0,95,0,97,0,99,0,101,0,103,0,105,0,107,0,109,0,111,0,113,0,
	115,0,117,0,119,0,121,0,123,0,125,0,127,0,129,0,131,0,1,0,31,1,0,39,39,
	3,0,9,10,13,13,32,32,2,0,10,10,13,13,1,0,48,57,2,0,65,90,97,122,2,0,65,
	65,97,97,2,0,66,66,98,98,2,0,67,67,99,99,2,0,68,68,100,100,2,0,69,69,101,
	101,2,0,70,70,102,102,2,0,71,71,103,103,2,0,72,72,104,104,2,0,73,73,105,
	105,2,0,74,74,106,106,2,0,75,75,107,107,2,0,76,76,108,108,2,0,77,77,109,
	109,2,0,78,78,110,110,2,0,79,79,111,111,2,0,80,80,112,112,2,0,81,81,113,
	113,2,0,82,82,114,114,2,0,83,83,115,115,2,0,84,84,116,116,2,0,85,85,117,
	117,2,0,86,86,118,118,2,0,87,87,119,119,2,0,88,88,120,120,2,0,89,89,121,
	121,2,0,90,90,122,122,331,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
	0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
	1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
	0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
	1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
	0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
	1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,
	0,0,75,1,0,0,0,1,133,1,0,0,0,3,135,1,0,0,0,5,137,1,0,0,0,7,139,1,0,0,0,
	9,141,1,0,0,0,11,143,1,0,0,0,13,145,1,0,0,0,15,147,1,0,0,0,17,150,1,0,0,
	0,19,152,1,0,0,0,21,155,1,0,0,0,23,157,1,0,0,0,25,160,1,0,0,0,27,164,1,
	0,0,0,29,167,1,0,0,0,31,171,1,0,0,0,33,173,1,0,0,0,35,175,1,0,0,0,37,177,
	1,0,0,0,39,179,1,0,0,0,41,181,1,0,0,0,43,183,1,0,0,0,45,185,1,0,0,0,47,
	187,1,0,0,0,49,189,1,0,0,0,51,191,1,0,0,0,53,193,1,0,0,0,55,203,1,0,0,0,
	57,215,1,0,0,0,59,226,1,0,0,0,61,231,1,0,0,0,63,237,1,0,0,0,65,242,1,0,
	0,0,67,247,1,0,0,0,69,252,1,0,0,0,71,262,1,0,0,0,73,268,1,0,0,0,75,279,
	1,0,0,0,77,293,1,0,0,0,79,295,1,0,0,0,81,297,1,0,0,0,83,299,1,0,0,0,85,
	301,1,0,0,0,87,303,1,0,0,0,89,305,1,0,0,0,91,307,1,0,0,0,93,309,1,0,0,0,
	95,311,1,0,0,0,97,313,1,0,0,0,99,315,1,0,0,0,101,317,1,0,0,0,103,319,1,
	0,0,0,105,321,1,0,0,0,107,323,1,0,0,0,109,325,1,0,0,0,111,327,1,0,0,0,113,
	329,1,0,0,0,115,331,1,0,0,0,117,333,1,0,0,0,119,335,1,0,0,0,121,337,1,0,
	0,0,123,339,1,0,0,0,125,341,1,0,0,0,127,343,1,0,0,0,129,345,1,0,0,0,131,
	347,1,0,0,0,133,134,5,43,0,0,134,2,1,0,0,0,135,136,5,45,0,0,136,4,1,0,0,
	0,137,138,5,42,0,0,138,6,1,0,0,0,139,140,5,47,0,0,140,8,1,0,0,0,141,142,
	5,37,0,0,142,10,1,0,0,0,143,144,5,94,0,0,144,12,1,0,0,0,145,146,5,61,0,
	0,146,14,1,0,0,0,147,148,5,33,0,0,148,149,5,61,0,0,149,16,1,0,0,0,150,151,
	5,60,0,0,151,18,1,0,0,0,152,153,5,60,0,0,153,154,5,61,0,0,154,20,1,0,0,
	0,155,156,5,62,0,0,156,22,1,0,0,0,157,158,5,62,0,0,158,159,5,61,0,0,159,
	24,1,0,0,0,160,161,3,81,40,0,161,162,3,107,53,0,162,163,3,87,43,0,163,26,
	1,0,0,0,164,165,3,109,54,0,165,166,3,115,57,0,166,28,1,0,0,0,167,168,3,
	107,53,0,168,169,3,109,54,0,169,170,3,119,59,0,170,30,1,0,0,0,171,172,5,
	40,0,0,172,32,1,0,0,0,173,174,5,41,0,0,174,34,1,0,0,0,175,176,5,123,0,0,
	176,36,1,0,0,0,177,178,5,125,0,0,178,38,1,0,0,0,179,180,5,91,0,0,180,40,
	1,0,0,0,181,182,5,93,0,0,182,42,1,0,0,0,183,184,5,44,0,0,184,44,1,0,0,0,
	185,186,5,59,0,0,186,46,1,0,0,0,187,188,5,58,0,0,188,48,1,0,0,0,189,190,
	5,46,0,0,190,50,1,0,0,0,191,192,5,95,0,0,192,52,1,0,0,0,193,199,3,79,39,
	0,194,198,3,79,39,0,195,198,3,77,38,0,196,198,3,51,25,0,197,194,1,0,0,0,
	197,195,1,0,0,0,197,196,1,0,0,0,198,201,1,0,0,0,199,197,1,0,0,0,199,200,
	1,0,0,0,200,54,1,0,0,0,201,199,1,0,0,0,202,204,3,77,38,0,203,202,1,0,0,
	0,204,205,1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,213,1,0,0,0,207,209,
	5,46,0,0,208,210,3,77,38,0,209,208,1,0,0,0,210,211,1,0,0,0,211,209,1,0,
	0,0,211,212,1,0,0,0,212,214,1,0,0,0,213,207,1,0,0,0,213,214,1,0,0,0,214,
	56,1,0,0,0,215,221,5,39,0,0,216,220,8,0,0,0,217,218,5,39,0,0,218,220,5,
	39,0,0,219,216,1,0,0,0,219,217,1,0,0,0,220,223,1,0,0,0,221,219,1,0,0,0,
	221,222,1,0,0,0,222,224,1,0,0,0,223,221,1,0,0,0,224,225,5,39,0,0,225,58,
	1,0,0,0,226,227,3,119,59,0,227,228,3,115,57,0,228,229,3,121,60,0,229,230,
	3,89,44,0,230,60,1,0,0,0,231,232,3,91,45,0,232,233,3,81,40,0,233,234,3,
	103,51,0,234,235,3,117,58,0,235,236,3,89,44,0,236,62,1,0,0,0,237,238,3,
	107,53,0,238,239,3,121,60,0,239,240,3,103,51,0,240,241,3,103,51,0,241,64,
	1,0,0,0,242,243,3,87,43,0,243,244,3,81,40,0,244,245,3,119,59,0,245,246,
	3,89,44,0,246,66,1,0,0,0,247,248,3,119,59,0,248,249,3,97,48,0,249,250,3,
	105,52,0,250,251,3,89,44,0,251,68,1,0,0,0,252,253,3,87,43,0,253,254,3,81,
	40,0,254,255,3,119,59,0,255,256,3,89,44,0,256,257,3,119,59,0,257,258,3,
	97,48,0,258,259,3,105,52,0,259,260,3,89,44,0,260,70,1,0,0,0,261,263,7,1,
	0,0,262,261,1,0,0,0,263,264,1,0,0,0,264,262,1,0,0,0,264,265,1,0,0,0,265,
	266,1,0,0,0,266,267,6,35,0,0,267,72,1,0,0,0,268,269,5,47,0,0,269,270,5,
	47,0,0,270,274,1,0,0,0,271,273,8,2,0,0,272,271,1,0,0,0,273,276,1,0,0,0,
	274,272,1,0,0,0,274,275,1,0,0,0,275,277,1,0,0,0,276,274,1,0,0,0,277,278,
	6,36,0,0,278,74,1,0,0,0,279,280,5,47,0,0,280,281,5,42,0,0,281,285,1,0,0,
	0,282,284,9,0,0,0,283,282,1,0,0,0,284,287,1,0,0,0,285,286,1,0,0,0,285,283,
	1,0,0,0,286,288,1,0,0,0,287,285,1,0,0,0,288,289,5,42,0,0,289,290,5,47,0,
	0,290,291,1,0,0,0,291,292,6,37,0,0,292,76,1,0,0,0,293,294,7,3,0,0,294,78,
	1,0,0,0,295,296,7,4,0,0,296,80,1,0,0,0,297,298,7,5,0,0,298,82,1,0,0,0,299,
	300,7,6,0,0,300,84,1,0,0,0,301,302,7,7,0,0,302,86,1,0,0,0,303,304,7,8,0,
	0,304,88,1,0,0,0,305,306,7,9,0,0,306,90,1,0,0,0,307,308,7,10,0,0,308,92,
	1,0,0,0,309,310,7,11,0,0,310,94,1,0,0,0,311,312,7,12,0,0,312,96,1,0,0,0,
	313,314,7,13,0,0,314,98,1,0,0,0,315,316,7,14,0,0,316,100,1,0,0,0,317,318,
	7,15,0,0,318,102,1,0,0,0,319,320,7,16,0,0,320,104,1,0,0,0,321,322,7,17,
	0,0,322,106,1,0,0,0,323,324,7,18,0,0,324,108,1,0,0,0,325,326,7,19,0,0,326,
	110,1,0,0,0,327,328,7,20,0,0,328,112,1,0,0,0,329,330,7,21,0,0,330,114,1,
	0,0,0,331,332,7,22,0,0,332,116,1,0,0,0,333,334,7,23,0,0,334,118,1,0,0,0,
	335,336,7,24,0,0,336,120,1,0,0,0,337,338,7,25,0,0,338,122,1,0,0,0,339,340,
	7,26,0,0,340,124,1,0,0,0,341,342,7,27,0,0,342,126,1,0,0,0,343,344,7,28,
	0,0,344,128,1,0,0,0,345,346,7,29,0,0,346,130,1,0,0,0,347,348,7,30,0,0,348,
	132,1,0,0,0,11,0,197,199,205,211,213,219,221,264,274,285,1,6,0,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!FormulaLexer.__ATN) {
			FormulaLexer.__ATN = new ATNDeserializer().deserialize(FormulaLexer._serializedATN);
		}

		return FormulaLexer.__ATN;
	}


	static DecisionsToDFA = FormulaLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}